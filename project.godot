; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=4

_global_script_classes=[ {
"base": "Container",
"class": "BoundingContainer",
"language": "GDScript",
"path": "res://bounding_container.gd"
}, {
"base": "MarginContainer",
"class": "BoundingMarginContainer",
"language": "GDScript",
"path": "res://previous_versions/bounding_margin_container.gd"
}, {
"base": "TextureRect",
"class": "ColorBlock",
"language": "GDScript",
"path": "res://tests/color_block.gd"
} ]
_global_script_class_icons={
"BoundingContainer": "",
"BoundingMarginContainer": "",
"ColorBlock": ""
}

[application]

config/name="BoundingContainer"
config/description="Godot's built in container classes grow with the contents. This works well for a lot of cases but not when you want to be able to limit the size the of the container (e.g. when you want to keep the entire contents on the screen).

This is simply a `BoundingContainer` node that extends the native `MarginContainer`. This allows you to set a margin and a max size. If no max size is provided, it will use the `viewport` size. 
"
run/main_scene="res://tests/capped.tscn"
config/icon="res://icon.png"

[debug]

gdscript/completion/autocomplete_setters_and_getters=true
gdscript/warnings/unsafe_property_access=true
gdscript/warnings/unsafe_method_access=true
gdscript/warnings/unsafe_cast=true
gdscript/warnings/unsafe_call_argument=true

[rendering]

environment/default_environment="res://default_env.tres"
